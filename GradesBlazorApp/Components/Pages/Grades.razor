@page "/grades"
@using GradesBlazorApp.Entities
@using GradesBlazorApp.AppContext
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationContext> DbFactory
@using Microsoft.AspNetCore.Components.Web
@rendermode RenderMode.InteractiveServer

<PageTitle>Оценки</PageTitle>

<h1>Оценки</h1>

<button class="btn btn-primary mb-3" @onclick="() => ShowAddForm(true)">Добавить оценку</button>

@if (showAddForm)
{
    <div class="card mb-3">
        <div class="card-body">
            <h4 class="card-title">Добавление оценки</h4>
            <EditForm Model="@newGrade" OnValidSubmit="@AddGrade">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Студент</label>
                    <InputSelect class="form-control" @bind-Value="newGrade.StudentId">
                        <option value="">Выберите студента</option>
                        @foreach (var student in students)
                        {
                            <option value="@student.StudentId">@student.FirstName @student.LastName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newGrade.StudentId)" />
                </div>
                <div class="form-group">
                    <label>Предмет</label>
                    <InputSelect class="form-control" @bind-Value="newGrade.SubjectId">
                        <option value="">Выберите предмет</option>
                        @foreach (var subject in subjects)
                        {
                            <option value="@subject.SubjectId">@subject.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newGrade.SubjectId)" />
                </div>
                <div class="form-group">
                    <label>Оценка</label>
                    <InputNumber class="form-control" @bind-Value="newGrade.Score" />
                    <ValidationMessage For="@(() => newGrade.Score)" />
                </div>
                <div class="form-group">
                    <label>Дата</label>
                    <InputDate class="form-control" @bind-Value="newGrade.Date" />
                    <ValidationMessage For="@(() => newGrade.Date)" />
                </div>
                <div class="mt-2">
                    <button type="submit" class="btn btn-success">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowAddForm(false)">Отмена</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @messageClass">@message</div>
}

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Оценка</th>
            <th>Дата</th>
            <th>Студент</th>
            <th>Предмет</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var grade in grades)
        {
            <tr>
                <td>@grade.GradeId</td>
                <td>@grade.Score</td>
                <td>@grade.Date.ToShortDateString()</td>
                <td>@grade.Student?.FirstName @grade.Student?.LastName</td>
                <td>@grade.Subject?.Name</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => DeleteGrade(grade.GradeId)">Удалить</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Grade> grades = new();
    private List<Student> students = new();
    private List<Subject> subjects = new();
    private bool showAddForm = false;
    private Grade newGrade = new Grade { Date = DateTime.Now };
    private string message = string.Empty;
    private string messageClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadGrades();
        await LoadStudents();
        await LoadSubjects();
    }

    private async Task LoadGrades()
    {
        using var context = DbFactory.CreateDbContext();
        grades = await context.Grades
            .Include(g => g.Student)
            .Include(g => g.Subject)
            .ToListAsync();
    }

    private async Task LoadStudents()
    {
        using var context = DbFactory.CreateDbContext();
        students = await context.Students.ToListAsync();
    }

    private async Task LoadSubjects()
    {
        using var context = DbFactory.CreateDbContext();
        subjects = await context.Subjects.ToListAsync();
    }

    private void ShowAddForm(bool show)
    {
        showAddForm = show;
        if (!show)
        {
            newGrade = new Grade { Date = DateTime.Now };
        }
        StateHasChanged();
    }

    private async Task AddGrade()
    {
        using var context = DbFactory.CreateDbContext();
        try
        {
            context.Grades.Add(newGrade);
            await context.SaveChangesAsync();
            ShowMessage("Оценка успешно добавлена!", "alert-success");
            await LoadGrades();
            ShowAddForm(false);
        }
        catch (Exception ex)
        {
            ShowMessage($"Ошибка при добавлении оценки: {ex.Message}", "alert-danger");
        }
    }

    private async Task DeleteGrade(int gradeId)
    {
        using var context = DbFactory.CreateDbContext();
        var grade = await context.Grades.FindAsync(gradeId);
        if (grade != null)
        {
            context.Grades.Remove(grade);
            await context.SaveChangesAsync();
            await LoadGrades();
            ShowMessage("Оценка успешно удалена!", "alert-success");
        }
        else
        {
            ShowMessage("Оценка не найдена!", "alert-danger");
        }
    }

    private void ShowMessage(string msg, string alertClass)
    {
        message = msg;
        messageClass = alertClass;
        StateHasChanged();
    }
}
